function doPost(e) {

  const path = e.parameter.path;

  try {
    const ss = SpreadsheetApp.openById("17m2K1PAXxaKK4A66mcyW-FURwEcYa4hFM7pcfl6EypY");

    if (path === "createMatch") {
      const body = JSON.parse(e.postData.contents);
      const matchId = body.match_id;
      if (!matchId) throw new Error("No match_id provided");

      const template = ss.getSheetByName("MatchTemplate");
      if (!template) throw new Error("No sheet named 'MatchTemplate' found");

      if (ss.getSheetByName(matchId)) {
        return corsTextOutput("Sheet already exists");
      }

      template.copyTo(ss).setName(matchId);
      return corsTextOutput("Match sheet created");
    }

    // Match stats data
    const data = JSON.parse(e.postData.contents);
    const matchId = data[0]?.match_id;
    if (!matchId) throw new Error("No match_id provided");

    let sheet = ss.getSheetByName(matchId);
    const template = ss.getSheetByName("MatchTemplate");
    if (!sheet && template) {
      sheet = template.copyTo(ss);
      sheet.setName(matchId);
    }

    const rows = data.map(entry => ([
      new Date(),
      entry.match_id,
      entry.player_id,
      entry.win,
      entry.loss,
      entry.score_100,
      entry.score_140,
      entry.score_180,
      entry.highest_checkout,
      entry.score_26,
      entry.tens,
      entry.miss,
      entry.dotd,
      entry.is_double || false
    ]));

    sheet.getRange(sheet.getLastRow() + 1, 1, rows.length, rows[0].length).setValues(rows);
    return corsTextOutput("Success");

  } catch (error) {
    return corsTextOutput("Error: " + error.message);
  }
}

function doGet(e) {
  const sheet = SpreadsheetApp.openById("17m2K1PAXxaKK4A66mcyW-FURwEcYa4hFM7pcfl6EypY").getSheetByName("Team");
  const rows = sheet.getDataRange().getValues();

  const players = rows.slice(1).map(row => ({
    id: row[0],
    first_name: row[1],
    last_name: row[2],
  }));

  return ContentService
    .createTextOutput(JSON.stringify(players))
    .setMimeType(ContentService.MimeType.JSON)
    .setHeader("Access-Control-Allow-Origin", "*")
    .setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
    .setHeader("Access-Control-Allow-Headers", "Content-Type");
}

// CORS preflight support
function doOptions(e) {
  return ContentService.createTextOutput("")
    .setMimeType(ContentService.MimeType.TEXT)
    .setHeader("Access-Control-Allow-Origin", "*")
    .setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
    .setHeader("Access-Control-Allow-Headers", "Content-Type");
}

// Helper
function corsTextOutput(content) {
  return ContentService.createTextOutput(content)
    .setMimeType(ContentService.MimeType.TEXT)
    .setHeader("Access-Control-Allow-Origin", "*")
    .setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
    .setHeader("Access-Control-Allow-Headers", "Content-Type");
}
